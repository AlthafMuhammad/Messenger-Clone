{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","React","forwardRef","ref","message","isUser","username","className","Card","style","borderRadius","lineHeight","width","CardContent","paddingTop","paddingRight","paddingBottom","paddingLeft","Typography","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","marginTop","FormControl","Input","placeholder","value","onChange","e","target","IconButton","disabled","variant","color","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wUAgCeA,G,MA1BDC,IAAMC,YAAW,WAAoBC,GAAS,IAA3BC,EAA0B,EAA1BA,QACvBC,EADiD,EAAlBC,WACZF,EAAQE,SACjC,OACQ,yBAAKC,UAAU,cACX,yBAAMJ,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,kBAChD,yBAAKF,IAAKA,EAAKI,UAAU,mBAEpBF,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MAIA,kBAACE,EAAA,EAAD,CAAMC,MAAO,CAACC,aAAa,QAAQC,WAAW,OAAOC,MAAM,gBACvD,kBAACC,EAAA,EAAD,CAAaN,UAAWF,EAAO,oBAAsB,qBAAsBI,MAAO,CAACK,WAAW,MAAMC,aAAa,OAAOC,cAAc,MAAMC,YAAY,SACpJ,kBAACC,EAAA,EAAD,KACKd,EAAQA,iB,iBCL1Be,GAbIC,IAASC,cAAc,CACtCC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGVT,IAASU,a,iCCmDHC,MApDf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEiBF,mBAAS,CAAC,CAAC1B,SAAS,GAAGF,QAAQ,MAFhD,mBAEN+B,EAFM,KAEGC,EAFH,OAGiBJ,mBAAS,IAH1B,mBAGN1B,EAHM,KAGG+B,EAHH,KA2Bb,OAtBAC,qBAAU,WACRnB,EAAGoB,WAAW,YAAYC,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAC/DN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAI1C,QAASyC,EAAIE,iBAEjE,IAEHT,qBAAU,WACRD,EAAYW,OAAO,6BAClB,IAeC,yBAAKzC,UAAU,OACb,yBAAK0C,IAAI,6FAA6FxC,MAAO,CAACyC,UAAU,SACxH,uCAAa5C,GACb,yBAAKC,UAAU,kBACb,0BAAMA,UAAU,aACd,kBAAC4C,EAAA,EAAD,CAAa5C,UAAU,oBACrB,kBAAC6C,EAAA,EAAD,CAAO7C,UAAU,aAAa8C,YAAY,mBAAmBC,MAAOrB,EAAOsB,SAAU,SAAAC,GAAC,OAAEtB,EAASsB,EAAEC,OAAOH,UAC1G,kBAACI,EAAA,EAAD,CAAYnD,UAAU,kBAAkBoD,UAAW1B,EAAO2B,QAAQ,YAAYC,MAAM,UAAUC,KAAK,SAASC,QApBtG,SAACP,GACjBA,EAAEQ,iBAEF7C,EAAGoB,WAAW,YAAY0B,IAAI,CAC5B7D,QAAQ6B,EACR3B,SAAUA,EACV4D,UAAW9C,IAASU,UAAUqC,WAAWC,oBAG3ClC,EAAS,MAWmI,kBAAC,IAAD,UAKxI,kBAAC,IAAD,CAAU3B,UAAU,qBAAqBE,MAAO,CAAC,UAAW,OAExD0B,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAG1C,EAAL,EAAKA,QAAL,OACX,kBAAC,EAAD,CAASiE,IAAKvB,EAAIxC,SAAUA,EAAUF,QAASA,UC3CzCkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnF,c","file":"static/js/main.38774a63.chunk.js","sourcesContent":["import React,{ forwardRef } from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport './Message.css';\nimport FlipMove from 'react-flip-move';\n\n\nconst Message=React.forwardRef(({message,username},ref) => {\n    const isUser= username===message.username;\n    return (\n            <div className=\"messageBox\">\n                <div  ref={ref} className={`message ${isUser && 'message__user'}`} >\n                <div ref={ref} className=\"mess__username\" >\n                   \n                   {!isUser && `${message.username || 'Unknown User'}:` }\n               \n                </div>\n                    \n                    <Card style={{borderRadius:'1.3em',lineHeight:'1.34',width:'fit-content'}} >\n                        <CardContent className={isUser?'message__userCard' : 'message__guestCard'} style={{paddingTop:'6px',paddingRight:'12px',paddingBottom:'7px',paddingLeft:'12px'}}>\n                            <Typography>\n                                {message.message}\n                                \n                            </Typography>\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        \n        \n    )\n})\n\nexport default Message;\n","import firebase from 'firebase';\n\nconst firebaseApp= firebase.initializeApp({\n    apiKey: \"AIzaSyDTEHfew75ESSeYFBusirCDvr4d58VtI-k\",\n    authDomain: \"messenger-clone-9e061.firebaseapp.com\",\n    databaseURL: \"https://messenger-clone-9e061.firebaseio.com\",\n    projectId: \"messenger-clone-9e061\",\n    storageBucket: \"messenger-clone-9e061.appspot.com\",\n    messagingSenderId: \"907031836511\",\n    appId: \"1:907031836511:web:7ff4d293f44aca6807e8ea\",\n    measurementId: \"G-WW9C5FJN5H\"\n});\n\nconst db=firebase.firestore();\n\nexport default db;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Button, FormControl, Input, InputLabel, Container, Grid } from '@material-ui/core';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\n\n\nfunction App() {\n  const [input,setInput]= useState(\"\");\n  const [messages,setMessages]= useState([{username:'',message:''}]);\n  const [username,setUsername]= useState('');\n\n  useEffect(() => {\n    db.collection('messages').orderBy('timestamp','desc').onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n    })\n  }, [])\n\n  useEffect(() => {\n    setUsername(prompt(\"Please enter your name\"))\n  }, []);\n\n  const sendMessage=(e)=>{\n    e.preventDefault();\n\n    db.collection('messages').add({\n      message:input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    \n    setInput('');\n  }\n\n  return (\n      <div className=\"App\">\n        <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\" style={{marginTop:'3px'}} />\n        <h2>Welcome {username}</h2>\n        <div className=\"form_container\">\n          <form className=\"app__form\">\n            <FormControl className=\"app__formControl\">\n              <Input className=\"app__input\" placeholder=\"Enter message...\" value={input} onChange={e=>setInput(e.target.value)}/>\n              <IconButton className=\"app__iconButton\" disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\" onClick={sendMessage}><SendIcon/></IconButton>\n            </FormControl>\n          </form>\n        </div>\n\n        <FlipMove className=\"messages_container\" style={{'z-index': '-1'}}>\n          {\n            messages.map(({id,message})=>(\n              <Message key={id} username={username} message={message}/>\n              \n            ))\n          }\n        </FlipMove>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}